// HELP
//$("#" + accountId + "_accountNameNew").prop( 'readonly' , 'true' );

var isAdmin = false;

function updateDisconnect() {
    var disconnect = $("#mpaDisconnect");
    disconnect.attr("href", disconnect.attr("href") + tokenQueryString);

    var accounts = $("#mpaAccounts");
    accounts.attr("href", accounts.attr("href") + tokenQueryString);
}

function updateHeaderAccounts() {
    var acts = $("#mpaAccounts");
    acts.attr("href", acts.attr("href") + tokenQueryString);
}

function updateHeaderCategories(accountId, accountName) {
    var cats = $("#mpaCategories");
    cats.attr("href", cats.attr("href") + tokenQueryString + "&accountId=" + accountId + "&accountName=" + accountName);
}

function updateHeaderProviders(accountId, accountName) {
    var pvdrs = $("#mpaProviders");
    pvdrs.attr("href", pvdrs.attr("href") + tokenQueryString + "&accountId=" + accountId + "&accountName=" + accountName);
}

function updateHeaderOperations(accountId, accountName) {
    var operations = $("#mpaOperations");
    operations.attr("href", operations.attr("href") + tokenQueryString + "&accountId=" + accountId + "&accountName=" + accountName);
}

function loadInfos() {
    $.getJSON("../../../mpa/api/rest/common/infos" + tokenQueryString, function (msg) {
        document.title += " - " + msg.version;

        jQuery.ajax(
            {
                url: "js/pickadate/i18n/" + msg.locale + ".js",
                dataType: 'script',
                async: false
            });
    });
}

function loadUsers() {
    updateDisconnect();

    loadInfos();

    var users = '';
    users += '<div class="row">';
    users += ' <div class="col-md-3 col-xs-12">';
    users += '	 <input type="text" width="100%" class="full" tabindex="1" name="login" placeholder="Compte" id="mpaUserLogin"></input>';
    users += ' </div>';
    users += ' <div class="col-md-3 col-xs-6">';
    users += '	 <input type="password" width="100%" class="full" tabindex="1" name="pwd" placeholder="Mot de passe" id="mpaUserPassword" type="password"></input>';
    users += ' </div>';
    users += ' <div class="col-md-3 col-xs-6">';
    users += '	 <input type="password" width="100%" class="full" tabindex="1" name="pwdCheck" placeholder="Confirmer mot de passe" id="mpaUserPasswordConfirm" ></input>';
    users += ' </div>';
    users += ' <div class="col-md-1 col-xs-6">Adminisrateur</div>';
    users += ' <div class="col-md-1 col-xs-6">MDP erreur</div>';
    users += ' <div class="col-md-1 col-xs-12">';
    users += '	 <button name="e" id="mpaAddButton" class="full">+</button>';
    users += ' </div>';
    users += '</div>';

    // Insert in DOM
    $("#mpaUsers").html(users);

    // Load account from REST server
    $.getJSON("../../res-adm/users" + tokenQueryString, function (msg) {
        $.each(msg.users, function (index, user) {
            htmlAddUser(user.id, user.version, user.login, user.isAdmin, user.pwdErrNbr);
        });
    });

    // Register add action on click to add a user
    $("#mpaAddButton").click(function () {
        restAddUser();
    });
}

// Add user in html
function htmlAddUser(userId, userVersion, userLogin, userIsAdmin, pwdErrNbr) {
    var users = '<div class="row" id="' + userId + '" version="' + userVersion + '">';
    users += '<div class="col-md-3 col-xs-12" id="' + userId + '_userLogin"></div>';
    users += '<div class="col-md-3 col-xs-6" id="' + userId + '_userPwd"></div>';
    users += '<div class="col-md-3 col-xs-6" id="' + userId + '_userPwdNew" style="display:none"><input class="form-control"></input></div>';
    users += '<div class="col-md-3 col-xs-6" id="' + userId + '_userPwdCheck"></div>';
    users += '<div class="col-md-3 col-xs-6" id="' + userId + '_userPwdCheckNew" style="display:none"><input class="form-control"></input></div>';
    users += '<div class="col-md-1 col-xs-6">' + userIsAdmin + '&nbsp;</div>';
    users += '<div class="col-md-1 col-xs-6">' + pwdErrNbr + '&nbsp;<button class="">Reset</button></div>';
    users += '<div class="col-md-1 col-xs-12" id="' + userId + '_delButton"></div>';
    users += '</div>';

    //alert(users);

    // Insert in DOM
    if ($("#mpaUsers div.row").length == 0) $("#mpaUsers").html(users);
    else $(users).insertAfter($("#mpaUsers div.row:last"));

    // Only normal user can be deleted
    if (userIsAdmin == "false") $("#" + userId + '_delButton').html('<button class="del full">-</button>');

    // Update user here
    // In order to avoid <script> code injection
    $("#" + userId + "_userLogin").text(userLogin).html();

    // Attach function to button freshly inserted in DOM
    $("#" + userId + " div button.del").click(restAndHtmlDelUser);

    // Attach function to account name freshly inserted in DOM
    // TODO $("#" + userId + "_userLogin").click( { userId: userId }, changeUserPseudo  );

    // Register update action on enter key to update an account
    // Code is here and not in changeAccountName because otherwize keypress is registered each time
    // a rename action (ENTER key press) is performed => several POST request
    //TODO $("#" + userId + "_accountNameNew input").keypress( { accountId: accountId }, restUpdateAccount );

    // Avoid to have focus on input field
    // => avoid to have keyboard on mobile devices
    $("#mpaUserLogin").blur();

}

function changeAccountName(event) {
    // Get account if given in parameter
    var accountId = event.data.accountId;
    // Get account name
    var accountName = $("#" + accountId + "_accountName").text();

    // Hide account
    $("#" + accountId + "_accountName").hide();

    // Show editable account name
    $("#" + accountId + "_accountNameNew").show();

    // Update input field and allows to :
    // * Give the focus
    // * Have cursor at the end of value
    $("#" + accountId + "_accountNameNew input").focus().val(accountName);
}

// Ask to add user on REST server
function restAddUser() {
    // Disable add button in waiting server response
    $("#mpaAddButton").prop("disabled", true);

    // Get user values
    var userLogin = $("#mpaUserLogin").val();
    var userPassword = $("#mpaUserPassword").val();
    var userPasswordConfirm = $("#mpaUserPasswordConfirm").val();

    $.post('../../res-adm/users/0/add', {
        login: userLogin,
        password: userPassword,
        passwordConfirm: userPasswordConfirm
    }).done(function (data) {
        var response = jQuery.parseJSON(data);
        var userId = response.id;

        // Error in addind account
        if (isNaN(parseInt(userId, 16))) {
            // Display error message
            alert(userId);
        }
        else {
            htmlAddUser(response.id, response.version, userLogin, "false", 0);
            // Clear input field
            $("#mpaUserLogin").val('');
            $("#mpaUserPassword").val('');
            $("#mpaUserPasswordConfirm").val('');
        }
    }).fail(function () {
        alert("Error, asks administrator for details");
    }).always(function () {
        // Enable add button after server response
        $("#mpaAddButton").prop("disabled", false);
    })
}

// Ask to REST server to delete account
// If OK, performe action in HTML 
function restAndHtmlDelUser() {
    // Get account ID
    var userIdToDelete = $(this).parent().parent().attr('id');
    // Get account version
    var userVersion = $(this).parent().parent().attr('version');

    // Disable del button in waiting server response
    $("#" + userIdToDelete + " td button").prop("disabled", true);

    $.post('../../res/users/' + userIdToDelete + '/del', {
        // Without this line there is a post error !
        // So it seems one parameter minimum is necessary
        id: userIdToDelete,
        version: userVersion
    }).done(function (data) {
        // Get JSON response
        var response = jQuery.parseJSON(data);
        // Get account ID from response
        var userId = response.id;

        // Error in deleting account
        if (isNaN(parseInt(userId, 16))) {
            // Display error message
            alert(userId);
        }
        else {
            // Delete account in HTML
            $("#" + userIdToDelete).remove();
        }
    }).fail(function () {
        alert("Error, asks administrator for details");
    })
    //.always( function() {
    // Give focus to account name
    //$("#mpaAccountName").focus();
    //})
}

// Ask to update account on REST server
function restUpdateAccount(event) {
    // Get account given in parameter
    var accountId = event.data.accountId;

    // Manage cariage return
    if (event.which == 13) {
        // Prevent default browser behavior
        event.preventDefault();


        // Get account version
        var accountVersion = $("#" + accountId).attr('version');

        // Get new account input name
        var accountNameNewInput = $("#" + accountId + "_accountNameNew input");
        // Disable new account input name in waiting server response
        accountNameNewInput.prop("disabled", true);

        // Get new account name
        var accountNameNew = accountNameNewInput.val();

        $.post('res/accounts/' + accountId + '/upd', {
            name: accountNameNew,
            version: accountVersion
        }).done(function (data) {
            var response = jQuery.parseJSON(data);
            var accountId = response.id;

            // Error in addind account
            if (isNaN(parseInt(accountId, 16))) {
                // Display error message
                alert(accountId);
            }
            else {
                // Hide and reset editable account name
                $("#" + accountId + "_accountNameNew").hide();
                $("#" + accountId + "_accountNameNew").val('');

                // Update account version
                $("#" + accountId).attr('version', response.version);

                // Update account name and show it
                $("#" + accountId + "_accountName").text(accountNameNew);
                $("#" + accountId + "_accountName").show();
            }
        }).fail(function () {
            alert("Error, asks administrator for details");
        }).always(function () {
            // Enable new account input name after server response
            accountNameNewInput.prop("disabled", false);
        })
    }
    // ECHAP
    else if (event.which == 0) {
        // Hide and reset editable account name
        $("#" + accountId + "_accountNameNew").hide();
        $("#" + accountId + "_accountNameNew").val('');

        // Display account name
        $("#" + accountId + "_accountName").show();
    }
}

//-----------------------------------------------------------------
//Manage accounts
//-----------------------------------------------------------------
function loadAccounts() {
    loadInfos();

    //updateDisconnect();

    // Load account from REST server
    $.getJSON("../../../mpa/api/rest/homebank/v1.2/accounts", function (msg) {
        if (msg.isAdmin == "true") {
            isAdmin = true;

            // Add menu
            var usersMenu = '<ul class="nav navbar-nav navbar-right">';
            usersMenu += '<li><a id="mpaUsers" href="../admin/users/">Utilisateurs</a></li>';
            usersMenu += '</ul>';

            $(usersMenu).insertAfter("#navbar ul:last");
            var users = $("#mpaUsers");
            users.attr("href", users.attr("href") + tokenQueryString);

            var accounts = '';
            accounts += '<div class="row">';
            accounts += ' <div class="col-md-11 col-xs-12">';
            //<!-- tabindex="1" => with tabulation, input field is selected in first -->
            accounts += '	 <input type="text" width="100%" tabindex="1" name="name" placeholder="Nom du compte à ajouter" id="mpaAccountName"></input>';
            accounts += ' </div>';
            //accounts += ' <div class="col-md-1"></div>';
            accounts += ' <div class="col-md-1 col-xs-12">';
            accounts += '	 <button name="e" id="mpaAddButton" class="full">+</button>';
            accounts += ' </div>';
            accounts += '</div>';

            // Insert in DOM
            //$(accounts).insertAfter($("#mpaAccounts"));
            $("#mpaAccounts").html(accounts);

            // Register add action on click to add an account
            $("#mpaAddButton").click(function () {
                restAddAccount();
            });

            // Register add action on enter key to add an account
            $("#mpaAccountName").keypress(function (event) {
                // Manage cariage return
                if (event.which == 13) {
                    // Prevent default browser behavior
                    event.preventDefault();
                    // Add account
                    restAddAccount();
                }
            });

        }

        // Give focus to account name
        //$("#mpaAccountName").focus();

        $.each(msg, function (index, account) {
            if (!account.options.accountClosed && !account.options.accountSummaryExclude) {
                htmlAddAccount(account.key, account.version, account.name, account.balance);
            }
        });
    });
}

// Add account in html
function htmlAddAccount(accountId, accountVersion, accountName, accountAmount) {
    var amountSignClass = '';
    if (accountAmount.indexOf('-') != -1) amountSignClass = 'amountNegativeSign';

    var accounts = '<div class="row" id="' + accountId + '" version="' + accountVersion + '">';
    //accounts += '<td><a href="accounts.html?acnt=' + account.name + '">' + account.name + '</a></td>';
    if (isAdmin) {
        accounts += '<div class="col-md-1 col-xs-2"><button class="rename full">R</button></div>';
        accounts += '<div class="col-md-9 col-xs-4" id="' + accountId + '_accountName"></div>';
        accounts += '<div class="col-md-9 col-xs-4" id="' + accountId + '_accountNameNew" style="display:none"><input class="form-control"></input></div>';

        accounts += '<div class="col-md-1 col-xs-2">' + accountAmount + '</div>';
        //accounts += '<div class="col-md-1 col-xs-6"><a href="/mpa/categories/' + tokenQueryString + '&accountId=' + accountId + '">Catégories</a></div>';
        //accounts += '<div class="col-md-1 col-xs-6"><a href="/mpa/providers/' + tokenQueryString + '&accountId=' + accountId + '">Fournisseurs</a></button></div>';
        accounts += '<div class="col-md-1 col-xs-12"><button class="del full">-</button></div>';
    }
    else {
        accounts += '<div class="col-md-11 col-xs-7" id="' + accountId + '_accountName"></div>';
        accounts += '<div class="col-md-11 col-xs-7" id="' + accountId + '_accountNameNew" style="display:none"><input class="form-control"></input></div>';
        //accounts += '<div class="col-md-1 col-xs-4"><a href="/mpa/categories/' + tokenQueryString + '&accountId=' + accountId + '">Catégories</a></div>';
        //accounts += '<div class="col-md-1 col-xs-4"><a href="/mpa/providers/' + tokenQueryString + '&accountId=' + accountId + '">Fournisseurs</a></button></div>';
        accounts += '<div class="col-md-1 col-xs-5 amount ' + amountSignClass + '">' + accountAmount + '</div>';
    }

    accounts += '</div>';

    // Insert in DOM
    //$(accounts).insertAfter($("#mpaAccounts div:last"));
    if ($("#mpaAccounts div.row").length == 0) $("#mpaAccounts").html(accounts);
    else $(accounts).insertAfter($("#mpaAccounts div.row:last"));

    // Add color one line on two
    var lastRow = $("#mpaAccounts div.row:last");
    if ($("#mpaAccounts div.row").length % 2 === 0) lastRow.addClass("odd");
    else lastRow.addClass("peer");

    // Update account here
    // In order to avoid <script> code injection
    var accountVar = $("#" + accountId + "_accountName");
    // For to insert account name as text
    accountVar.text(accountName);
    // Transform text in html link
    accountVar.html("<a href='mpa/operations" + tokenQueryString + "&accountId=" + accountId + "&accountName=" + accountName + "'>" + accountVar.text() + "</a>");

    if (isAdmin) {
        // Attach function to button freshly inserted in DOM
        $("#" + accountId + " div button.rename").click({accountId: accountId}, changeAccountName);


        // Attach function to button freshly inserted in DOM
        $("#" + accountId + " div button.del").click(restAndHtmlDelAccount);

        // Attach function to account name freshly inserted in DOM
        //$("#" + accountId + "_accountName").click( { accountId: accountId }, changeAccountName  );

        // Register update action on enter key to update an account
        // Code is here and not in changeAccountName because otherwize keypress is registered each time
        // a rename action (ENTER key press) is performed => several POST request
        $("#" + accountId + "_accountNameNew input").keypress({accountId: accountId}, restUpdateAccount);
    }

    // Avoid to have focus on input field
    // => avoid to have keyboard on mobile devices
    $("#mpaAccountName").blur();
}

function changeAccountName(event) {
    // Get account if given in parameter
    var accountId = event.data.accountId;

    // Get account name
    var accountName = $("#" + accountId + "_accountName").text();

    // Hide account
    $("#" + accountId + "_accountName").hide();

    // Show editable account name
    $("#" + accountId + "_accountNameNew").show();

    // Update input field and allows to :
    // * Give the focus
    // * Have cursor at the end of value
    $("#" + accountId + "_accountNameNew input").focus().val(accountName);
}

// Ask to add account on REST server
function restAddAccount() {
    // Disable add button in waiting server response
    $("#mpaAddButton").prop("disabled", true);

    // Get account name
    var accountName = $("#mpaAccountName").val();

    $.post('../res/accounts/add', {
        name: accountName
    }).done(function (data) {
        var response = jQuery.parseJSON(data);
        var accountId = response.id;

        // Error in addind account
        if (isNaN(parseInt(accountId, 16))) {
            // Display error message
            alert(accountId);
        }
        else {
            htmlAddAccount(response.key, response.version, accountName, response.balance);
            // Clear input field
            $("#mpaAccountName").val('');
        }
    }).fail(function () {
        alert("Error, asks administrator for details");
    }).always(function () {
        // Enable add button after server response
        $("#mpaAddButton").prop("disabled", false);
    })
}

// Ask to REST server to delete account
// If OK, performe action in HTML 
function restAndHtmlDelAccount() {
    // Get account ID
    var accountIdToDelete = $(this).parent().parent().attr('id');
    // Get account version
    var accountVersion = $(this).parent().parent().attr('version');

    // Disable del button in waiting server response
    $("#" + accountIdToDelete + " td button").prop("disabled", true);

    $.post('../res/accounts/' + accountIdToDelete + '/del', {
        // 20150415 : Old comment for memory
        // Without this line there is a post error !
        // One parameter minimum is necessary
        version: accountVersion
    }).done(function (data) {
        // Get JSON response
        var response = jQuery.parseJSON(data);
        // Get account ID from response
        var accountId = response.id;

        // Error in deleting account
        if (isNaN(parseInt(accountId, 16))) {
            // Display error message
            alert(accountId);
        }
        else {
            // Delete account in HTML
            $("#" + accountIdToDelete).remove();
        }
    }).fail(function () {
        alert("Error, asks administrator for details");
    })
    //.always( function() {
    // Give focus to account name
    //$("#mpaAccountName").focus();
    //})
}

// Ask to update account on REST server
function restUpdateAccount(event) {
    // Get account given in parameter
    var accountId = event.data.accountId;

    // Manage cariage return
    if (event.which == 13) {
        // Prevent default browser behavior
        event.preventDefault();


        // Get account version
        var accountVersion = $("#" + accountId).attr('version');

        // Get new account input name
        var accountNameNewInput = $("#" + accountId + "_accountNameNew input");
        // Disable new account input name in waiting server response
        accountNameNewInput.prop("disabled", true);

        // Get new account name
        var accountNameNew = accountNameNewInput.val();

        $.post('../res/accounts/' + accountId + '/upd', {
            name: accountNameNew,
            version: accountVersion
        }).done(function (data) {
            var response = jQuery.parseJSON(data);
            var accountId = response.id;

            // Error in addind account
            if (isNaN(parseInt(accountId, 16))) {
                // Display error message
                alert(accountId);
            }
            else {
                // Hide and reset editable account name
                $("#" + accountId + "_accountNameNew").hide();
                $("#" + accountId + "_accountNameNew").val('');

                // Update account version
                $("#" + accountId).attr('version', response.version);

                // Update account name and show it
                $("#" + accountId + "_accountName").text(accountNameNew);
                $("#" + accountId + "_accountName").show();
            }
        }).fail(function () {
            alert("Error, asks administrator for details");
        }).always(function () {
            // Enable new account input name after server response
            accountNameNewInput.prop("disabled", false);
        })
    }
    // ECHAP
    else if (event.which == 0) {
        // Hide and reset editable account name
        $("#" + accountId + "_accountNameNew").hide();
        $("#" + accountId + "_accountNameNew").val('');

        // Display account name
        $("#" + accountId + "_accountName").show();
    }
}


//-----------------------------------------------------------------
// Manage categories
//-----------------------------------------------------------------
function loadCategories() {
    loadInfos();

    var accountId = getParameterByName("accountId");
    var accountName = getParameterByName("accountName");

    //updateDisconnect();
    updateHeaderAccounts();
    updateHeaderOperations(accountId, accountName);

    // Update summary title
    var sumTitle = $("#mpaSummaryTitle");
    sumTitle.text("[" + accountName + "] " + sumTitle.text());

    // Load categorie from REST server
    $.getJSON("../../../mpa/api/rest/homebank/v1.2/accounts/" + accountId + "/categories" + tokenQueryString, function (msg) {
        if (msg.isAdmin == "true") {
            isAdmin = true;

            var categories = '';
            categories += '<div class="row">';
            categories += ' <div class="col-md-11 col-xs-12">';
            //<!-- tabindex="1" => with tabulation, input field is selected in first -->
            categories += '	 <input type="text" width="100%" class="full" tabindex="1" name="name" placeholder="Nom de la catégorie à ajouter" id="mpaCategoryName"></input>';
            categories += ' </div>';
            categories += ' <div class="col-md-1 col-xs-12">';
            categories += '	 <button name="e" id="mpaAddButton" class="full">+</button>';
            categories += ' </div>';
            categories += '</div>';

            // Insert in DOM
            $("#mpaCategories").html(categories);

            // Register add action on click to add an account
            $("#mpaAddButton").click(function () {
                restAddCategory();
            });

            // Register add action on enter key to add an account
            $("#mpaCategoryName").keypress(function (event) {
                // Manage cariage return
                if (event.which == 13) {
                    // Prevent default browser behavior
                    event.preventDefault();
                    // Add account
                    restAddCategory();
                }
            });

        }

        $.each(msg, function (index, category) {
            htmlAddCategory(category.key, category.version, category.name, category.balance);
        });
    });
}

//Add category in html
function htmlAddCategory(categoryId, categoryVersion, categoryName, categoryAmount) {
    var amountSignClass = '';
    if (categoryAmount.indexOf('-') != -1) amountSignClass = 'amountNegativeSign';

    var categories = '<div class="row" id="' + categoryId + '" version="' + categoryVersion + '">';
    if (isAdmin) {
        categories += '<div class="col-md-1 col-xs-12"><button class="rename full">R</button></div>';
        categories += '<div class="col-md-9 col-xs-10" id="' + categoryId + '_categoryName"></div>';
        categories += '<div class="col-md-9 col-xs-10" id="' + categoryId + '_categoryNameNew" style="display:none"><input class="form-control"></input></div>';
        categories += '<div class="col-md-1 col-xs-2">' + categoryAmount + '</div>';

        categories += '<div class="col-md-1 col-xs-12"><button class="del full">-</button></div>';
    }
    else {
        categories += '<div class="col-md-11 col-xs-8" id="' + categoryId + '_categoryName"></div>';
        categories += '<div class="col-md-11 col-xs-8" id="' + categoryId + '_categoryNameNew" style="display:none"><input class="form-control"></input></div>';
        categories += '<div class="col-md-1 col-xs-4 amount ' + amountSignClass + '">' + categoryAmount + '</div>';
    }
    categories += '</div>';

    // Insert in DOM
    if ($("#mpaCategories div.row").length == 0) $("#mpaCategories").html(categories);
    else $(categories).insertAfter($("#mpaCategories div.row:last"));

    // Update account here
    // In order to avoid <script> code injection
    var categorieVar = $("#" + categoryId + "_categoryName");
    // For to insert account name as text
    categorieVar.text(categoryName);

    // Add color one line on two
    var lastRow = $("#mpaCategories div.row:last");
    if ($("#mpaCategories div.row").length % 2 === 0) lastRow.addClass("odd");
    else lastRow.addClass("peer");

    if (isAdmin) {
        // Attach function to button freshly inserted in DOM
        $("#" + categoryId + " div button.rename").click({categoryId: categoryId}, changeCategoryName);


        // Attach function to button freshly inserted in DOM
        $("#" + categoryId + " div button.del").click(restAndHtmlDelCategory);

        // Attach function to account name freshly inserted in DOM
        $("#" + categoryId + "_categoryName").click({categoryId: categoryId}, changeCategoryName);

        // Register update action on enter key to update an account
        // Code is here and not in changeCategoryName because otherwise keypress is registered each time
        // a rename action (ENTER key press) is performed => several POST request
        $("#" + categoryId + "_categoryNameNew input").keypress({categoryId: categoryId}, restUpdateCategory);
    }

    // Avoid to have focus on input field
    // => avoid to have keyboard on mobile devices
    $("#mpaCategoryName").blur();
}

function changeCategoryName(event) {
    // Get category if given in parameter
    var categoryId = event.data.categoryId;

    // Get category name
    var categoryName = $("#" + categoryId + "_categoryName").text();

    // Hide category
    $("#" + categoryId + "_categoryName").hide();

    // Show editable category name
    $("#" + categoryId + "_categoryNameNew").show();

    // Update input field and allows to :
    // * Give the focus
    // * Have cursor at the end of value
    $("#" + categoryId + "_categoryNameNew input").focus().val(categoryName);
}


//Ask to add category on REST server
function restAddCategory() {
    var accountId = getParameterByName("accountId");

    // Disable add button in waiting server response
    $("#mpaAddButton").prop("disabled", true);

    // Get account name
    var categoryName = $("#mpaCategoryName").val();

    $.post('../res/accounts/' + accountId + '/categories/add', {
        name: categoryName
    }).done(function (data) {
        var response = jQuery.parseJSON(data);
        var categoryId = response.id;

        // Error in addind account
        if (isNaN(parseInt(categoryId, 16))) {
            // Display error message
            alert(categoryId);
        }
        else {
            htmlAddCategory(response.id, response.version, categoryName, response.amount);
            // Clear input field
            $("#mpaCategoryName").val('');
        }
    }).fail(function () {
        alert("Error, asks administrator for details");
    }).always(function () {
        // Enable add button after server response
        $("#mpaAddButton").prop("disabled", false);
    })
}

//Ask to REST server to delete category
//If OK, perform action in HTML 
function restAndHtmlDelCategory() {
    var accountId = getParameterByName("accountId");

    // Get category ID
    var categoryIdToDelete = $(this).parent().parent().attr('id');
    // Get category version
    var categoryVersion = $(this).parent().parent().attr('version');

    // Disable del button in waiting server response
    $("#" + categoryIdToDelete + " td button").prop("disabled", true);

    $.post('../res/accounts/' + accountId + '/categories/' + categoryIdToDelete + '/del', {
        version: categoryVersion
    }).done(function (data) {
        // Get JSON response
        var response = jQuery.parseJSON(data);
        // Get category ID from response
        var categoryId = response.id;

        // Error in deleting account
        if (isNaN(parseInt(categoryId, 16))) {
            // Display error message
            alert(categoryId);
        }
        else {
            // Delete account in HTML
            $("#" + categoryIdToDelete).remove();
        }
    }).fail(function () {
        alert("Error, asks administrator for details");
    })
    //.always( function() {
    // Give focus to account name
    //$("#mpaAccountName").focus();
    //})
}


//Ask to update category on REST server
function restUpdateCategory(event) {
    var accountId = getParameterByName("accountId");

    // Get category given in parameter
    var categoryId = event.data.categoryId;

    // Manage cariage return
    if (event.which == 13) {
        // Prevent default browser behavior
        event.preventDefault();


        // Get category version
        var categoryVersion = $("#" + categoryId).attr('version');

        // Get new category input name
        var categoryNameNewInput = $("#" + categoryId + "_categoryNameNew input");
        // Disable new category input name in waiting server response
        categoryNameNewInput.prop("disabled", true);

        // Get new category name
        var categoryNameNew = categoryNameNewInput.val();

        $.post('../res/accounts/' + accountId + '/categories/' + categoryId + '/upd', {
            name: categoryNameNew,
            version: categoryVersion
        }).done(function (data) {
            var response = jQuery.parseJSON(data);
            var categoryId = response.id;

            // Error in addind account
            if (isNaN(parseInt(categoryId, 16))) {
                // Display error message
                alert(categoryId);
            }
            else {
                // Hide and reset editable category name
                $("#" + categoryId + "_categoryNameNew").hide();
                $("#" + categoryId + "_categoryNameNew").val('');

                // Update category version
                $("#" + categoryId).attr('version', response.version);

                // Update category name and show it
                $("#" + categoryId + "_categoryName").text(categoryNameNew);
                $("#" + categoryId + "_categoryName").show();
            }
        }).fail(function () {
            alert("Error, asks administrator for details");
        }).always(function () {
            // Enable new account input name after server response
            categoryNameNewInput.prop("disabled", false);
        })
    }
    // ECHAP
    else if (event.which == 0) {
        // Hide and reset editable account name
        $("#" + accountId + "_accountNameNew").hide();
        $("#" + accountId + "_accountNameNew").val('');

        // Display account name
        $("#" + accountId + "_accountName").show();
    }
}

//-----------------------------------------------------------------
//Manage providers
//-----------------------------------------------------------------
function loadPayees() {
    loadInfos();

    var accountId = getParameterByName("accountId");
    var accountName = getParameterByName("accountName");

    //updateDisconnect();
    updateHeaderAccounts();
    updateHeaderOperations(accountId, accountName);

    // Update summary title
    var sumTitle = $("#mpaSummaryTitle");
    sumTitle.text("[" + accountName + "] " + sumTitle.text());

    // Load categorie from REST server
    $.getJSON("../../../mpa/api/rest/homebank/v1.2/accounts/" + accountId + "/payees" + tokenQueryString, function (msg) {
        if (msg.isAdmin == "true") {
            isAdmin = true;

            var providers = '';
            providers += '<div class="row">';
            providers += ' <div class="col-md-11 col-xs-12">';
            //<!-- tabindex="1" => with tabulation, input field is selected in first -->
            providers += '	 <input type="text" width="100%" class="full" tabindex="1" name="name" placeholder="Nom du tiers à ajouter" id="mpaProviderName"></input>';
            providers += ' </div>';
            providers += ' <div class="col-md-1 col-xs-12">';
            providers += '	 <button name="e" id="mpaAddButton" class="full">+</button>';
            providers += ' </div>';
            providers += '</div>';

            // Insert in DOM
            $("#mpaProviders").html(providers);

            // Register add action on click to add an account
            $("#mpaAddButton").click(function () {
                restAddProvider();
            });

            // Register add action on enter key to add an account
            $("#mpaProviderName").keypress(function (event) {
                // Manage cariage return
                if (event.which == 13) {
                    // Prevent default browser behavior
                    event.preventDefault();
                    // Add account
                    restAddProvider();
                }
            });

        }

        $.each(msg, function (index, provider) {
            htmlAddProvider(provider.key, provider.version, provider.name, provider.balance);
        });
    });
}

//Add provider in html
function htmlAddProvider(providerId, providerVersion, providerName, providerAmount) {
    var amountSignClass = '';
    if (providerAmount.indexOf('-') != -1) amountSignClass = 'amountNegativeSign';

    var providers = '<div class="row" id="' + providerId + '" version="' + providerVersion + '">';
    if (isAdmin) {
        providers += '<div class="col-md-1 col-xs-12"><button class="rename full">R</button></div>';
        providers += '<div class="col-md-9 col-xs-10" id="' + providerId + '_providerName"></div>';
        providers += '<div class="col-md-9 col-xs-10" id="' + providerId + '_providerNameNew" style="display:none"><input class="form-control"></input></div>';
        providers += '<div class="col-md-1 col-xs-2">' + providerAmount + '</div>';

        providers += '<div class="col-md-1 col-xs-12"><button class="del full">-</button></div>';
    }
    else {
        providers += '<div class="col-md-11 col-xs-8" id="' + providerId + '_providerName"></div>';
        providers += '<div class="col-md-11 col-xs-8" id="' + providerId + '_providerNameNew" style="display:none"><input class="form-control"></input></div>';
        providers += '<div class="col-md-1 col-xs-4 amount ' + amountSignClass + '">' + providerAmount + '</div>';
    }
    providers += '</div>';

    // Insert in DOM
    if ($("#mpaPayees div.row").length == 0) $("#mpaPayees").html(providers);
    else $(providers).insertAfter($("#mpaPayees div.row:last"));

    // Update account here
    // In order to avoid <script> code injection
    var categorieVar = $("#" + providerId + "_providerName");
    // For to insert account name as text
    categorieVar.text(providerName);

    // Add color one line on two
    var lastRow = $("#mpaPayees div.row:last");
    if ($("#mpaPayees div.row").length % 2 === 0) lastRow.addClass("odd");
    else lastRow.addClass("peer");

    if (isAdmin) {
        // Attach function to button freshly inserted in DOM
        $("#" + providerId + " div button.rename").click({providerId: providerId}, changeProviderName);


        // Attach function to button freshly inserted in DOM
        $("#" + providerId + " div button.del").click(restAndHtmlDelProvider);

        // Attach function to account name freshly inserted in DOM
        $("#" + providerId + "_providerName").click({providerId: providerId}, changeProviderName);

        // Register update action on enter key to update an account
        // Code is here and not in changeProviderName because otherwise keypress is registered each time
        // a rename action (ENTER key press) is performed => several POST request
        $("#" + providerId + "_providerNameNew input").keypress({providerId: providerId}, restUpdateProvider);
    }

    // Avoid to have focus on input field
    // => avoid to have keyboard on mobile devices
    $("#mpaProviderName").blur();
}

function changeProviderName(event) {
    // Get provider if given in parameter
    var providerId = event.data.providerId;

    // Get provider name
    var providerName = $("#" + providerId + "_providerName").text();

    // Hide provider
    $("#" + providerId + "_providerName").hide();

    // Show editable provider name
    $("#" + providerId + "_providerNameNew").show();

    // Update input field and allows to :
    // * Give the focus
    // * Have cursor at the end of value
    $("#" + providerId + "_providerNameNew input").focus().val(providerName);
}


//Ask to add actegory on REST server
function restAddProvider() {
    var accountId = getParameterByName("accountId");

    // Disable add button in waiting server response
    $("#mpaAddButton").prop("disabled", true);

    // Get account name
    var providerName = $("#mpaProviderName").val();

    $.post('../res/accounts/' + accountId + '/providers/add', {
        name: providerName
    }).done(function (data) {
        var response = jQuery.parseJSON(data);
        var providerId = response.id;

        // Error in addind account
        if (isNaN(parseInt(providerId, 16))) {
            // Display error message
            alert(providerId);
        }
        else {
            htmlAddProvider(response.id, response.version, providerName, response.amount);
            // Clear input field
            $("#mpaProviderName").val('');
        }
    }).fail(function () {
        alert("Error, asks administrator for details");
    }).always(function () {
        // Enable add button after server response
        $("#mpaAddButton").prop("disabled", false);
    })
}

//Ask to REST server to delete provider
//If OK, perform action in HTML 
function restAndHtmlDelProvider() {
    var accountId = getParameterByName("accountId");

    // Get provider ID
    var providerIdToDelete = $(this).parent().parent().attr('id');
    // Get provider version
    var providerVersion = $(this).parent().parent().attr('version');

    // Disable del button in waiting server response
    $("#" + providerIdToDelete + " td button").prop("disabled", true);

    $.post('../res/accounts/' + accountId + '/providers/' + providerIdToDelete + '/del', {
        version: providerVersion
    }).done(function (data) {
        // Get JSON response
        var response = jQuery.parseJSON(data);
        // Get provider ID from response
        var providerId = response.id;

        // Error in deleting account
        if (isNaN(parseInt(providerId, 16))) {
            // Display error message
            alert(providerId);
        }
        else {
            // Delete account in HTML
            $("#" + providerIdToDelete).remove();
        }
    }).fail(function () {
        alert("Error, asks administrator for details");
    })
    //.always( function() {
    // Give focus to account name
    //$("#mpaAccountName").focus();
    //})
}


//Ask to update provider on REST server
function restUpdateProvider(event) {
    var accountId = getParameterByName("accountId");

    // Get provider given in parameter
    var providerId = event.data.providerId;

    // Manage cariage return
    if (event.which == 13) {
        // Prevent default browser behavior
        event.preventDefault();


        // Get provider version
        var providerVersion = $("#" + providerId).attr('version');

        // Get new provider input name
        var providerNameNewInput = $("#" + providerId + "_providerNameNew input");
        // Disable new provider input name in waiting server response
        providerNameNewInput.prop("disabled", true);

        // Get new provider name
        var providerNameNew = providerNameNewInput.val();

        $.post('../res/accounts/' + accountId + '/providers/' + providerId + '/upd', {
            name: providerNameNew,
            version: providerVersion
        }).done(function (data) {
            var response = jQuery.parseJSON(data);
            var providerId = response.id;

            // Error in addind account
            if (isNaN(parseInt(providerId, 16))) {
                // Display error message
                alert(providerId);
            }
            else {
                // Hide and reset editable provider name
                $("#" + providerId + "_providerNameNew").hide();
                $("#" + providerId + "_providerNameNew").val('');

                // Update provider version
                $("#" + providerId).attr('version', response.version);

                // Update provider name and show it
                $("#" + providerId + "_providerName").text(providerNameNew);
                $("#" + providerId + "_providerName").show();
            }
        }).fail(function () {
            alert("Error, asks administrator for details");
        }).always(function () {
            // Enable new account input name after server response
            providerNameNewInput.prop("disabled", false);
        })
    }
    // ECHAP
    else if (event.which == 0) {
        // Hide and reset editable account name
        $("#" + accountId + "_accountNameNew").hide();
        $("#" + accountId + "_accountNameNew").val('');

        // Display account name
        $("#" + accountId + "_accountName").show();
    }
}

//-----------------------------------------------------------------
//Manage operations
//-----------------------------------------------------------------
function loadOperations() {
    loadInfos();

    var accountId = getParameterByName("accountId");
    var accountName = getParameterByName("accountName");

    //updateDisconnect();
    updateHeaderAccounts();
    updateHeaderCategories(accountId, accountName);
    updateHeaderProviders(accountId, accountName);

    // Update summary title
    var sumTitle = $("#mpaSummaryTitle");
    sumTitle.text("[" + accountName + "] " + sumTitle.text());

    // Load operations from REST server
    $.getJSON("../../../mpa/api/rest/homebank/v1.2/accounts/" + accountId + "/operations", function (msg) {

        var operations = '';
        operations += '<div class="row" id="mpaOperationHeader">';

        operations += ' <div class="col-md-1 col-xs-12" id="mpaOperationDivDate">';
        operations += '	 <input type="text" width="100%" class="full" tabindex="1" name="date" placeholder="Date" id="mpaOperationDate"></input>';	// class="form-control" => permet de donner un meilleu rendu
        operations += ' </div>';

        operations += ' <div class="col-md-1 col-xs-12">';
        operations += '	 <select width="100%" class="full" tabindex="1" name="paymode" id="mpaOperationMode"></select>';
        operations += ' </div>';


        operations += ' <div class="col-md-1 col-xs-12">';
        operations += '	 <input type="text" width="100%" class="full" tabindex="1" name="provider" placeholder="Payee" id="mpaOperationProvider"></input>';
        operations += ' </div>';

        operations += ' <div class="col-md-2 col-xs-12">';
        operations += '  <input type="text" width="100%" class="full" tabindex="1" name="category1" placeholder="Category" id="mpaOperationCategory" count="1"></input>';
        operations += ' </div>';

        operations += ' <div class="col-md-3 col-xs-12">';
        operations += '	 <input type="text" width="100%" class="full" tabindex="1" name="note" placeholder="Wording" id="mpaOperationNote"></input>';
        operations += ' </div>';

        operations += ' <div class="col-md-1 col-xs-12">';
        operations += '	 <input type="text" width="100%" class="full" tabindex="1" placeholder="Amount" id="mpaOperationAmount"></input>';
        operations += ' </div>';

        operations += ' <div class="col-md-1 col-xs-12">';
        operations += '	 <input type="text" width="100%" class="full" placeholder="Balance" disabled></input>';
        operations += ' </div>';

        operations += ' <div class="col-md-2 col-xs-12">';
        operations += '	 <button name="e" id="mpaAddButton" class="full">+</button>';
        operations += ' </div>';

        operations += '</div>';

        // Insert in DOM
        $("#mpaOperations").html(operations);

        $.getJSON("../../../mpa/api/rest/homebank/v1.2/payment-modes" + tokenQueryString, function (result) {

            var mpaOperationMode = $("#mpaOperationMode");
            $.each(result, function (index, paymentMode) {
                mpaOperationMode.append($("<option />").val(paymentMode.code).text(paymentMode.name).prop('disabled', !paymentMode.managed));
            });
        });

        $("#mpaOperationDate").pickadate({
            format: 'dd-mm-yyyy',
            formatSubmit: 'yyyy-mm-dd',
            hiddenSuffix: '__formatSubmit'
        });

        $("#mpaOperationCategory1").focus(function () {
            //alert("2");
            var a = "<div>AAAA</div>"
            $("$mpaOperationCategories input:last").insertAfter(a);
        });


        // Add date
        /*var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth()+1; //January is 0!
        if( mm < 10 )	mm = '0' + mm;
        var yyyy = today.getFullYear();
        $("#mpaOperationDate").val(yyyy+''+mm+''+dd);*/

        // Register add action on click to add an account
        $("#mpaAddButton").click(function () {
            restAddOperation();
        });
        /*
                // Register add action on enter key to add an account
                $("#mpaCategoryName").keypress(function( event )
                {
                    // Manage cariage return
                    if( event.which == 13 )
                    {
                        // Prevent default browser behavior
                        event.preventDefault();
                        // Add account
                        restAddCategory();
                    }
                });*/

        $.each(msg, function (index, operation) {
            htmlAddOperation(operation);
        });
    });
}

//Add operation in html
function htmlAddOperation(operation) {
    var operationId = operation.id;
    var operationVersion = operation.version;
    var operationDate = operation.dateFormatted;
    var operationModeName = operation.paymodeName;
    var operationProvider = (operation.payeeName != null ? operation.payeeName : '');
    var operationAmount = operation.amount;
    var operationAccountBalance = operation.balance;
    var operationCategoryName = (operation.categoryName != null ? operation.categoryName : '');
    var operationWording = (operation.wording != null ? operation.wording : '');


    var operations = '<div class="row" id="' + operationId + '" version="' + operationVersion + '">';
    operations += '<div class="col-md-1 col-xs-6" id="' + operationId + '_operationDate"> ' + operationDate + '</div>';

    operations += '<div class="col-md-1 col-xs-6">';
    operations += '<div id="' + operationId + '_operationMode"> ' + operationModeName + '</div>';
    operations += '</div>';

    operations += '<div class="col-md-1 col-xs-6" id="' + operationId + '_operationProvider"> ' + operationProvider + '</div>';

    operations += '<div class="col-md-2 col-xs-6">';
    operations += '<div id="' + operationId + '_operationCategory"> ' + operationCategoryName + '</div>';
    operations += '</div>';

    /*operations += '<div class="col-md-1 col-xs-4">';
    var opAmountSignClass = '';
    if( operationAmount < 0 ) opAmountSignClass = 'amountNegativeSign';

    operations += '<div class=' + opAmountSignClass + ' id="' + operationId + '_operationAmount"> ' + operation.amount + '</div>';
    operations += '</div>';*/

    operations += '<div class="col-md-3 col-xs-12">';
    operations += '<div id="' + operationId + '_operationNote"> ' + operationWording + '</div>';
    operations += '</div>';

    // Operation amount
    var opAmountSignClass = '';
    if (operationAmount.indexOf('-') != -1) opAmountSignClass = 'amountNegativeSign';
    operations += '<div class="col-md-1 col-xs-6 amount ' + opAmountSignClass + '" id="' + operationId + '_operationAmount">' + operationAmount + '</div>';

    var operationAcountBalanceClass = '';
    if (operationAccountBalance.indexOf('-') != -1) operationAcountBalanceClass = 'amountNegativeSign';
    operations += '<div class="col-md-1 col-xs-6 amount ' + operationAcountBalanceClass + '" id="' + operationId + '_operationAccountBalance">' + operationAccountBalance + '</div>';

    operations += ' <div class="col-md-1 col-xs-12">';
    operations += '	 <button name="e" id="mpaDeleteButton" class="full">-</button>';
    operations += ' </div>';

    operations += ' <div class="col-md-1 col-xs-12">';
    operations += '	 <button name="e" id="mpaModifyButton" class="full">M</button>';
    operations += ' </div>';

    operations += '</div>';

    // Insert in DOM
    if ($("#mpaOperations div.row").length == 0) $("#mpaOperations").html(operations);
    else $(operations).insertAfter($("#mpaOperations div.row:last"));

    /*
    // Update account here
    // In order to avoid <script> code injection
    var categorieVar = $( "#" + providerId + "_providerName" );
    // For to insert account name as text
    categorieVar.text( providerName );*/

    // Add color one line on two
    var lastRow = $("#mpaOperations div.row:last");
    if ($("#mpaOperations div.row").length % 2 === 0) lastRow.addClass("odd");
    else lastRow.addClass("peer");

    // Avoid to have focus on input field
    // => avoid to have keyboard on mobile devices
    $("#mpaOperationDate").blur();
}

//Ask to add operation on REST server
function restAddOperation() {
    var accountId = getParameterByName("accountId");

    // Disable add button in waiting server response
    $("#mpaAddButton").prop("disabled", true);

    // Get operation date
    var operationDate = $("#mpaOperationDivDate > input[name='date__formatSubmit']").val();
    // Get operation provider
    var operationProvider = $("#mpaOperationProvider").val();
    // Get operation amount
    var operationAmount = $("#mpaOperationAmount").val();
    // Get operation categorie
    var operationCategory = $("#mpaOperationCategory").val();
    // Get operation note
    var operationNote = $("#mpaOperationNote").val();

    /*var test = {};
    var index = 0;
    alert($(".mpaSubOpCat").length);
    $(".mpaSubOpCat").each( function()
    {
        test[index] = "OK !";
        index+=1;
    });

    test[index] = "OK 2!";
    index+=1;*/

    //var test = { 1: operationCategory, qwerty: operationAmount  };

    var jsonData = {
        date: operationDate,
        payee: operationProvider,
        amount: operationAmount,
        category: operationCategory,
        wording: operationNote
    };

    $.ajax({
        type: 'POST',
        url: "../../../mpa/api/rest/homebank/v1.2/accounts/" + accountId + "/operations/add",
        data: JSON.stringify(jsonData),
        contentType: "application/json",
        dataType: 'json'
    }).done(function (data) {
        /*alert('data: ' + data);
        var response = jQuery.parseJSON(data);
        var operationId = response.id;

        // Error in addind account
        if( isNaN(parseInt(operationId, 16)) )
        {
            // Display error message
            alert(operationId);
        }
        else
        {
            var operation = { id: operationId , version: response.version , date: operationDate , provider: operationProvider , amount: operationAmount , accountBalance: response.accountBalance, "subOperations" : [{ category: operationCategory , amount: operationAmount, note: operationNote}] };

            htmlAddOperation( operation );
            // Clear input fields
            //$("#mpaOperationDate").val(''); // Several operation at the same date can be performed
            $("#mpaOperationProvider").val('');
            $("#mpaOperationAmount").val('');
            $("#mpaOperationCategory").val('');
            $("#mpaOperationNote").val('');
        }*/
    }).fail(function () {
        alert("Error, asks administrator for details");
    }).always(function () {
        // Enable add button after server response
        $("#mpaAddButton").prop("disabled", false);
    });
}
